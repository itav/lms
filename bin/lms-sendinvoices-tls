#!/usr/bin/perl
#
#  LMS version 1.11.10 Kri
#
#  Copyright (C) 2001-2010 LMS Developers
#
#  Please, see the doc/AUTHORS for more information about authors!
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License Version 2 as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#  USA.
#
#  $Id: lms-sendinvoices,v 1.49 2010/03/30 07:29:06 alec Exp $

use strict;
use DBI;
use Config::IniFiles;
use Getopt::Long;
use vars qw($configfile $help $version $quiet $fakedate);
use POSIX qw(strftime);
use LWP::UserAgent;
use Time::Local;
use MIME::QuotedPrint;
use Mail::Sender;
use strict;
use warnings;
use Try::Tiny;
use IO::All;
use Email::MIME;
use Email::Sender::Simple qw(sendmail);
use Email::Sender::Transport::SMTP::TLS;
use POSIX;

my $mail_body = <<'MSG';

Szanowni Państwo,<br><br>

W załączniku przesyłamy faktury za świadczone Państwu usługi w bieżącym miesiącu.<br><br>

W razie wątpliwości prosimy o kontakt z Biurem Obsługi Klienta.<br><br>

<pre>
Pozdrawiamy,
Zespół Optomedia.pl

tel. 32 330 95 00
e-mail: biuro@optomedia.pl
</pre>
MSG


my $_version = '1.11.10 Kri';

my %options = (
	"--config-file|C=s"     =>      \$configfile,
	"--quiet|q"     	=>      \$quiet,
	"--help|h"              =>      \$help,
	"--version|v"           =>      \$version,
	"--fakedate|f=s"	=>	\$fakedate,
);

Getopt::Long::config("no_ignore_case");
GetOptions(%options);

if($help)
{
	print STDERR <<EOF;
lms-sendinvoices, version $_version
(C) 2001-2010 LMS Developers

-C, --config-file=/etc/lms/lms.ini    alternate config file 
			    (default: /etc/lms/lms.ini);
-q, --quiet		    suppress any output, except errors;
-h, --help		    print this help and exit;
-v, --version		    print version info and exit;
-f, --fakedate=YYYY/MM/DD   override system date;

EOF
	exit 0;
}							

if($version)
{
	print STDERR <<EOF;
lms-sendinvoices, version $_version
(C) 2001-2010 LMS Developers

EOF
	exit 0;
}

if(!$configfile)
{
	$configfile = "/etc/lms/lms.ini";
}

if(! -r $configfile)
{
	print STDERR "Fatal error: Unable to read configuration file $configfile, exiting.\n";
	exit 1;
}

if(!$quiet)
{
	print STDOUT "lms-sendinvoices, version $_version\n";
	print STDOUT "(C) 2001-2010 LMS Developers\n";
	print STDOUT "Using file $configfile as config.\n";
}

my $ini = new Config::IniFiles -file => $configfile;
print @Config::IniFiles::errors;

my $dbtype = $ini->val('database', 'type') || 'mysql';
my $dbhost = $ini->val('database', 'host') || 'localhost';
my $dbuser = $ini->val('database', 'user') || 'root';
my $dbpasswd = $ini->val('database', 'password') || '';
my $dbname = $ini->val('database', 'database') || 'lms';

my $lms_url = $ini->val('sendinvoices', 'lms_url') || 'http://localhost/lms/';
my $lms_user = $ini->val('sendinvoices', 'lms_user') || '';
my $lms_password = $ini->val('sendinvoices', 'lms_password') || '';

my $smtp_host = $ini->val('sendinvoices', 'smtp_host') || 'localhost';
my $smtp_username = $ini->val('sendinvoices', 'smtp_username') || '';
my $smtp_password = $ini->val('sendinvoices', 'smtp_password') || '';
my $smtp_port = $ini->val('sendinvoices', 'smtp_port') || '25';
my $smtp_auth = $ini->val('sendinvoices', 'smtp_auth') || ''; # 'LOGIN', 'PLAIN', 'CRAM-MD5', 'NTLM'

my $filetype = $ini->val('invoices', 'type') || '';
my $debug_email = $ini->val('sendinvoices', 'debug_email') || '';
my $sender_name = $ini->val('sendinvoices', 'sender_name') || '';
my $sender_email = $ini->val('sendinvoices', 'sender_email') || '';
my $mail_subject = $ini->val('sendinvoices', 'mail_subject') || 'OPTOMEDIA - Nowa faktura';
#my $mail_body = $ini->val('sendinvoices', 'mail_body') || 'Attached file with Invoice No. %invoice';
my $customergroups = $ini->val('sendinvoices', 'customergroups') || '';

if(!$sender_email)
{
	print STDERR "Fatal error: sender_email unset! Can't continue, exiting.\n";
	exit 1;
}

if($smtp_auth && $smtp_auth !~ /LOGIN|PLAIN|CRAM-MD5|NTLM/i)
{
	print STDERR "Fatal error: smtp_auth setting not supported! Can't continue, exiting.\n";
	exit 1;
}

my $dbase;
my $utsfmt;

if($dbtype =~ /mysql/)
{
	$dbase = DBI->connect("DBI:mysql:database=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
	$dbase->do("SET NAMES utf8");
	$utsfmt = "UNIX_TIMESTAMP()";
}
elsif($dbtype eq "postgres")
{
	$dbase = DBI->connect("DBI:Pg:dbname=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
	$utsfmt = "EXTRACT(EPOCH FROM CURRENT_TIMESTAMP(0))";
}
else
{
	print STDERR "Fatal error: unsupported database type: $dbtype, exiting.\n";
	exit 1;
}

sub localtime2()
{
	if($fakedate)
	{
		my @fakedate = split(/\//, $fakedate);
		return localtime(timelocal(0,0,0,$fakedate[2],$fakedate[1]-1,$fakedate[0]));
	}
	else
	{
		return localtime();
	}
}

my $today = time();
my $fake_today = time();
if($fakedate)
{
    my @fd = split(/\//, $fakedate);
    $fake_today = mktime(0,0,0, $fd[2],$fd[1]-1,$fd[0]-1900,0,0);
}


sub encode_header
{
        my $subject = shift;
        $subject = encode_qp($subject, '');
        $subject =~ s/ /_/g;
        # @TODO: split long lines
        return "=?UTF-8?Q?$subject?=";
}

$Mail::Sender::NO_X_MAILER = 1;
$Mail::Sender::SITE_HEADERS = "X-Mailer: lms-sendinvoices v.$_version";

# get/set invoice file type
my $dbq = $dbase->prepare("SELECT value FROM uiconfig WHERE section='invoices' AND var='type' AND disabled=0");
$dbq->execute();
if(my $row = $dbq->fetchrow_hashref())
{
	$filetype = $row->{'value'};
}

my $fencoding = 'quoted-printable';
my $ftype = 'text/html';
my $fext = 'html';

if($filetype eq 'pdf')
{
	$ftype = 'application/octetstream';
	$fencoding = 'Base64';
	$fext = 'pdf';
}

my $month = sprintf("%d",strftime("%m",localtime2()));
my $day = strftime("%e",localtime2());
my $year = strftime("%Y",localtime2());
my $daystart = strftime("%s", 0, 0, 0, $day, $month - 1, $year - 1900);
my $dayend = strftime("%s", 59, 59, 23, $day, $month - 1, $year - 1900);
my $from = $sender_email;

if($sender_name)
{
	$sender_name = encode_header($sender_name);
	$from = "$sender_name <$from>";
}

my $groupwhere = '';
my $groupjoin = '';
if($customergroups)
{
	$customergroups = "UPPER('$customergroups')";
	$customergroups =~ s/[ \t]+/\'\),UPPER\(\'/g;
	$groupwhere = " AND UPPER(customergroups.name) IN ($customergroups)";  
	$groupjoin = "LEFT JOIN customerassignments ON (d.customerid = customerassignments.customerid) 
			LEFT JOIN customergroups ON (customerassignments.customergroupid = customergroups.id) ";
}

$dbq = $dbase->prepare("SELECT d.id, d.number, d.cdate, c.email, d.name, d.customerid, n.template
			FROM documents d 
			LEFT JOIN customers c ON (c.id = d.customerid) 
			LEFT JOIN numberplans n ON (n.id = d.numberplanid)
			$groupjoin
			WHERE c.deleted = 0 AND d.type = 1 AND c.email != '' 
				AND d.cdate >= $daystart AND d.cdate <= $dayend
				$groupwhere");
$dbq->execute();
while(my $row = $dbq->fetchrow_hashref())
{
	my $error;
	my $sender;
	my $ua = LWP::UserAgent->new;
	$ua->default_header('Accept-Language' => "pl_PL");
	my $response = $ua->get($lms_url.'/?m=invoice&override=1&original=1&id='.$row->{'id'}.'&loginform[login]='.$lms_user.'&loginform[pwd]='.$lms_password);
	my $custemail = $debug_email || $row->{'email'};
	
	if ($response->is_success)
	{
		my $invoice_number = $row->{'template'} || '%N/LMS/%Y';
		my $body = $mail_body;
		my $subject = $mail_subject;
		
		$invoice_number =~ s/%(\d*)N/sprintf"%0${1}d",$row->{'number'}/e;
		$invoice_number = strftime($invoice_number, localtime($row->{'cdate'}));
		$body =~ s/%invoice/$invoice_number/g;
		$subject =~ s/%invoice/$invoice_number/g;
		
		if(!$quiet)
		{
			print "Invoice No. $invoice_number for $row->{'name'} <$custemail>\n";
		}

my @parts = (
    Email::MIME->create(
        attributes => {
            filename     => 'invoice_'.$row->{'id'}.'.'.$fext.'',
            content_type => "application/pdf",
            encoding     => "base64",
            disposition  => 'invoice_'.$row->{'id'}.'.'.$fext.'',
            name         => "document.pdf",
        },
        body => $response->content,
    ),
    Email::MIME->create(
        attributes => {
    	    charset => 'UTF-8',
            content_type  => "text/html",
        },
        body => $mail_body,
    )
);

# Create the email message object.
my $email_object = Email::MIME->create(
    header => [
        From           => $sender_email,
        To             => $custemail,
        Subject        => $subject,
        content_type   =>'multipart/mixed'
    ],
    parts  => [ @parts ],
);

# Create the transport. Using gmail for this example
my $transport = Email::Sender::Transport::SMTP::TLS->new(
    host     => 'smtp.gmail.com',
    port     => '587',
    username => 'biuro@optomedia.pl',
    password => '123optomedia3'
);

# send the mail
try {
       sendmail( $email_object, {transport => $transport} );
} catch {
       warn "Email sending failed: $_";
};
$error = "";
    

	}
	else
	{
		print STDERR "Error: ".$response->status_line."\n";
		$error = $response->status_line;
	}
	sleep(3);
	
	my $dbq_sendinvoice;
        $dbq_sendinvoice = $dbase->prepare("INSERT INTO sendinvoices ( customer_id, doc_id, time, fakedate, email, error) VALUES ( '$row->{'customerid'}', '$row->{'id'}', '$today', '$fake_today', '$custemail', '$error')");
        $dbq_sendinvoice -> execute();

}

$dbq->finish();
$dbase->disconnect();
