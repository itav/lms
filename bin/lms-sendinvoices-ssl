#!/usr/bin/perl

use strict;
use DBI;
use Config::IniFiles;
use Getopt::Long;
use vars qw($configfile $help $version $quiet $fakedate $did);
use POSIX qw(strftime);
use LWP::UserAgent;
use Time::Local;
use MIME::QuotedPrint;
use MIME::Base64;
use Net::SMTP::SSL;
use Encode::Encoding;
use Encode::Detect::Detector;
use Date::Parse;
use POSIX;

my $standard_msg_body = <<'MSG';

Dzień dobry!

W załączniku przesyłam fakturę VAT.

MSG

my $_version = 'v0.9.0 by lanserver.pl';

my %options = (
	"--config-file|C=s"     =>      \$configfile,
	"--quiet|q"     	=>      \$quiet,
	"--help|h"              =>      \$help,
	"--version|v"           =>      \$version,
	"--fakedate|f=s"	=>	\$fakedate,
	"--did|d=s"		=>	\$did,
);

Getopt::Long::config("no_ignore_case");
GetOptions(%options);

if($help)
{
	print STDERR <<EOF;
lms-sendinvoices-ssl, version $_version

-C, --config-file=/etc/lms/lms.ini    alternate config file 
			    (default: /etc/lms/lms.ini);
-q, --quiet		    suppress any output, except errors;
-h, --help		    print this help and exit;
-v, --version		    print version info and exit;
-f, --fakedate=YYYY/MM/DD   override system date;
-d, --did		    send single document;

EOF
	exit 0;
}							

if($version)
{
	print STDERR <<EOF;
lms-sendinvoices-ssl, version $_version

EOF
	exit 0;
}

if(!$configfile)
{
	$configfile = "/etc/lms/lms.ini";
}

if(! -r $configfile)
{
	print STDERR "Fatal error: Unable to read configuration file $configfile, exiting.\n";
	exit 1;
}

if(!$quiet)
{
	print STDOUT "lms-sendinvoices-ssl, version $_version\n";
	print STDOUT "Using file $configfile as config.\n";
}

my $ini = new Config::IniFiles -file => $configfile;
print @Config::IniFiles::errors;

my $dbtype = $ini->val('database', 'type') || 'mysql';
my $dbhost = $ini->val('database', 'host') || 'localhost';
my $dbuser = $ini->val('database', 'user') || 'root';
my $dbpasswd = $ini->val('database', 'password') || '';
my $dbname = $ini->val('database', 'database') || 'lms';

my $lms_url = $ini->val('sendinvoices', 'lms_url') || '';
my $lms_user = $ini->val('sendinvoices', 'lms_user') || '';
my $lms_password = $ini->val('sendinvoices', 'lms_password') || '';

my $smtp_host = $ini->val('sendinvoices', 'smtp_host') || '';
my $smtp_user = $ini->val('sendinvoices', 'smtp_user') || '';
my $smtp_pass = $ini->val('sendinvoices', 'smtp_pass') || '';
my $smtp_auth = $ini->val('sendinvoices', 'smtp_auth') || 'LOGIN PLAIN'; # 'LOGIN', 'PLAIN', 'CRAM-MD5', 'NTLM'

my $filetype = $ini->val('invoices', 'type') || 'pdf';
my $debug_email = $ini->val('sendinvoices', 'debug_email') || '';
my $debug_email = 'mirek@netella.net';
#my $debug_email = 'biuro@techmedia.com.pl';
my $sender_name = $ini->val('sendinvoices', 'sender_name') || '';
my $sender_email = $ini->val('sendinvoices', 'sender_email') || '';
my $mail_subject = $ini->val('sendinvoices', 'mail_subject') || '';
#my $mail_body = $ini->val('sendinvoices', 'mail_body') || 'Attached file with Invoice No. %invoice';
my $mail_body = $standard_msg_body;
my $customergroups = $ini->val('sendinvoices', 'customergroups') || '';

if(!$sender_email)
{
	print STDERR "Fatal error: sender_email unset! Can't continue, exiting.\n";
	exit 1;
}

if($smtp_auth && $smtp_auth !~ /LOGIN|PLAIN|CRAM-MD5|NTLM/i)
{
	print STDERR "Fatal error: smtp_auth setting not supported! Can't continue, exiting.\n";
	exit 1;
}

my $dbase;
my $utsfmt;

if($dbtype =~ /mysql/)
{
	$dbase = DBI->connect("DBI:mysql:database=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
	$dbase->do("SET NAMES utf8");
	$utsfmt = "UNIX_TIMESTAMP()";
}
elsif($dbtype eq "postgres")
{
	$dbase = DBI->connect("DBI:Pg:dbname=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
	$utsfmt = "EXTRACT(EPOCH FROM CURRENT_TIMESTAMP(0))";
}
else
{
	print STDERR "Fatal error: unsupported database type: $dbtype, exiting.\n";
	exit 1;
}

$Mail::Sender::NO_X_MAILER = 1;
$Mail::Sender::SITE_HEADERS = "X-Mailer: lms-sendinvoices v.$_version";

# get/set invoice file type
my $dbq = $dbase->prepare("SELECT value FROM uiconfig WHERE section='invoices' AND var='type' AND disabled=0");
$dbq->execute();
if(my $row = $dbq->fetchrow_hashref())
{
	$filetype = $row->{'value'};
}
$dbq->finish();

$dbq = $dbase->prepare("SELECT value FROM uiconfig WHERE section='invoices' AND var='mail_body' AND disabled=0");
$dbq->execute();
if(my $row = $dbq->fetchrow_hashref())
{
	$mail_body = Encode::decode("UTF8", $row->{'value'});
}
$dbq->finish();

my $fencoding = 'quoted-printable';
my $ftype = 'text/html';
my $fext = 'pdf';

if($filetype eq 'pdf')
{
	$ftype = 'application/octetstream';
	$fencoding = 'Base64';
	$fext = 'pdf';
}

sub localtime2()
{
	if($fakedate)
	{
		my @fakedate = split(/\//, $fakedate);
		return localtime(timelocal(0,0,0,$fakedate[2],$fakedate[1]-1,$fakedate[0]));
	}
	else
	{
		return localtime();
	}
}

my $today = time();
my $fake_today = time();
if($fakedate)
{
    my @fd = split(/\//, $fakedate);
    $fake_today = mktime(0,0,0, $fd[2],$fd[1]-1,$fd[0]-1900,0,0);
}

my $month = sprintf("%d",strftime("%m",localtime2()));
my $day = strftime("%e",localtime2());
my $year = strftime("%Y",localtime2());
my $daystart = strftime("%s", 0, 0, 0, $day, $month - 1, $year - 1900);
my $dayend = strftime("%s", 59, 59, 23, $day, $month - 1, $year - 1900);
my $from = $sender_email;

print "Wysylanie faktur wystawionych na dzien: $day $month $year\n";

if($sender_name)
{
	$sender_name = '=?UTF-8?Q?'.encode_qp($sender_name, '').'?=';
	$from = '"'.$sender_name.'"'.' <'.$from.'>';
}

my $groupwhere = '';
my $groupjoin = '';
if($customergroups)
{
	$customergroups = "UPPER('$customergroups')";
	$customergroups =~ s/[ \t]+/\'\),UPPER\(\'/g;
	$groupwhere = " AND UPPER(customergroups.name) IN ($customergroups)";  
	$groupjoin = "LEFT JOIN customerassignments ON (documents.customerid = customerassignments.customerid) 
			LEFT JOIN customergroups ON (customerassignments.customergroupid = customergroups.id) ";
}

$dbq = $dbase->prepare("SELECT documents.id AS id, number, cdate, email, documents.name AS name, 
				documents.customerid AS customerid, template
			FROM documents 
			LEFT JOIN customers ON customers.id = documents.customerid 
			LEFT JOIN numberplans ON numberplanid = numberplans.id
			$groupjoin
			WHERE deleted = 0 AND documents.type = 1 AND email != '' AND invoicenotice = '1'
				".( $did ? "AND documents.id = ".$did : "AND cdate >= $daystart AND cdate <= $dayend
				$groupwhere" ));
$dbq->execute();

while(my $row = $dbq->fetchrow_hashref())
{

	my $error; # lanserver
	my $sender;
	my $ua = LWP::UserAgent->new;
	my $response = $ua->get($lms_url.'/?m=invoice&override=1&original=1&id='.$row->{'id'}.'&loginform[login]='.$lms_user.'&loginform[pwd]='.$lms_password);
	
	my $custemail = $debug_email || $row->{'email'};
	
	if ($response->is_success)
	{
		
		my $invoice_number = $row->{'template'} || '%N/LMS/%Y';
		my $body = $mail_body;
		my $subject = $mail_subject;
		
		$invoice_number =~ s/%(\d*)N/sprintf"%0${1}d",$row->{'number'}/e;
		$invoice_number = strftime($invoice_number, localtime($row->{'cdate'}));
		#$body =~ s/%invoice/$invoice_number/g;
		$subject =~ s/%invoice/$invoice_number/g;
		
		if(!$quiet)
		{
			print "Invoice No. $invoice_number for $row->{'name'} <$custemail>\n";
		}

		my $not_sended = 1;
		$invoice_number =~ tr/\"//d;
                $invoice_number =~ s/\//-/g;
		print "$invoice_number";
		while ( $not_sended ) 
		{
	    		my $smtp = Net::SMTP::SSL->new('smtp.gmail.com', Debug => 1, Port => 465);
	    		if ( $smtp != undef ) 
	    		{
				$smtp->auth('biuro@optomedia.pl','123optomedia3') or die "could not authenticate";
				$smtp->mail($sender_email);
				$smtp->recipient($custemail);
				$smtp->to($custemail);
				$smtp->data();
				$smtp->datasend("To: $custemail\n");
				$smtp->datasend("From: $sender_email\n");
				$smtp->datasend("Subject: $subject\n");
				$smtp->datasend("MIME-Version: 1.0\n");
				$smtp->datasend("Content-Transfer-Encoding: binary\n");
				$smtp->datasend("Content-Type: multipart/mixed; boundary=\"frontier\"\n");
				$smtp->datasend("\n--frontier\n");
				# tresc maila
				$smtp->datasend("Content-Type: text/plain; charset=UTF-8\n");
#				$smtp->datasend("Content-Disposition: quoted-printable\n\n");
				$smtp->datasend("Content-Transfer-Encoding: quoted-printable\n\n");
				$smtp->datasend("$body");
				$smtp->datasend("\n--frontier\n");
				# zalacznik
				$smtp->datasend("Content-Type: $ftype; name=\"invoice_$row->{'id'}.$fext\"\n");
				$smtp->datasend("Content-Disposition: inline; filename=\"Optomedia_Faktura_$invoice_number.$fext\"\n");
#                                $smtp->datasend("Content-Disposition: inline; filename=\"1.2_3\"\n");
				$smtp->datasend("Content-Transfer-Encoding: $fencoding\n\n");
				$smtp->datasend(encode_base64($response->content));
				$smtp->datasend("\n--frontier--\n");
				$smtp->dataend();
				$smtp->quit;
				$not_sended = 0;
				print "Wyslano.\n"
			} 
			else 
			{
				print "Nie mozna polaczyc z serwerem - probojemy jeszcze raz...\n";
				sleep(10);
			}
		}
	}
	else
	{
		print STDERR "Error: ".$response->status_line."\n";
		$error = $response->status_line;
	}
	
	sleep(10);
	
#	my $dbq_sendinvoice;
#	$dbq_sendinvoice = $dbase->prepare("INSERT INTO sendinvoices ( customer_id, doc_id, time, fakedate, email, error) VALUES ( '$row->{'customerid'}', '$row->{'id'}', '$today', '$fake_today', '$custemail', '$error')");
#	$dbq_sendinvoice -> execute();
}

$dbq->finish();
$dbase->disconnect();
